use axum::{Extension, Json, http::StatusCode};
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use sqlx::{Pool, Postgres};
use tracing::info;
use uuid::Uuid;

use crate::models::ResAccountSubclassification;

#[derive(Serialize, Deserialize, Debug)]
pub struct CreateAccountSubclassification {
    // Define fields for the account subclassification creation
    pub code: String,
    pub name: String,
    pub alias_name: Option<String>,
    pub cash_flow_type: String, // 'operating', 'investing', 'financing'
    pub ratio_type: String,
    pub is_variable_cost: Option<bool>,
    pub is_parent: Option<bool>,
    pub account_classification_id: Uuid,
    pub parent_id: Option<Uuid>,
    pub is_active: Option<bool>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct AccountSubclassificationResponse {
    // Define fields for the account subclassification creation
    pub id: Uuid,
    pub code: String,
    pub name: String,
    pub alias_name: Option<String>,
    pub cash_flow_type: String,
    pub ratio_type: String,
    pub is_variable_cost: bool,
    pub is_parent: bool,
    pub account_classification_id: Uuid,
    pub parent_id: Option<Uuid>,
    pub is_active: bool,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

pub fn asd() {
    println!("asd");
}

pub async fn create(
    Extension(pool): Extension<Pool<Postgres>>,
    Json(data): Json<CreateAccountSubclassification>,
) -> Result<Json<ResAccountSubclassification>, StatusCode> {
    info!(
        "Creating account subclassification with code: {}",
        data.code
    );

    Ok(Json(ResAccountSubclassification {
        id: Uuid::new_v4(), // This should be generated by the database
        code: data.code,
        name: data.name,
        alias_name: data.alias_name,
        cash_flow_type: data.cash_flow_type,
        ratio_type: data.ratio_type,
        is_variable_cost: data.is_variable_cost.unwrap_or(false),
        is_parent: data.is_parent.unwrap_or(false),
        account_classification_id: data.account_classification_id,
        parent_id: data.parent_id,
        is_active: data.is_active.unwrap_or(true),
        created_by: Uuid::new_v4(), // This should be the ID of the user creating the record
        updated_by: Uuid::new_v4(), // This should be the ID of the
        created_at: Utc::now(),
        updated_at: Utc::now(),
    }))
}
